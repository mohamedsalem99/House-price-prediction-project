# -*- coding: utf-8 -*-
"""Big Data Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SPoXwKn2sJ3krfjYh2Os3g0b3l1UnKnn

# Importing Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import matplotlib
matplotlib.rcParams['font.size'] = 16
matplotlib.rcParams['figure.figsize'] = (9, 9)
pd.set_option("display.max.columns", None)
import seaborn as sns
from pandas.plotting import scatter_matrix
from IPython.core.pylabtools import figsize
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn import datasets
from sklearn import svm
from sklearn.neighbors import KNeighborsRegressor
from sklearn.svm import SVR
from sklearn.metrics import r2_score
from sklearn.ensemble import RandomForestRegressor

"""# Reading Dataset"""

from google.colab import files
uploaded = files.upload()
data_set = pd.read_csv('House Price Dataset.csv',header=[1])

"""# Printing First 5 rows of Data"""

data_set.head()

data_set.describe()

data_set.isnull().sum()*100/data_set.shape[0]

data_set.dtypes



"""# Visualization of Data and Comparing Each Factor to the Final Price"""

plt.figure(figsize=(40,20))
sns.heatmap(data_set.corr(),annot=True)
plt.show()



df = data_set.drop('id',axis=1)
sns.pairplot(df[['Total Land Size','Groos Area of unit','House Age','Land Value',
                 'Location Type','Building Type','Exist elevator','Distance from Malls','Distance to road','Final Price']],height=3)

sns.pairplot(df[['Number of bedrooms','Number of bathrooms','Garage','Garden Share','Level of Finishing',
                 'Preliminary estimated construction','Duration of construction','Price of the unit at the beginning','Population Trends in the city','Final Price']],height=3)

sns.pairplot(df[['Standard Level in the region','Quality of Schools','Quality of Services','Transportation',
                 'Interest Rate','Inflation Rate','Economic climate','CPI','Months in Market','Final Price']],height=3)



"""# Applying Linear Regression"""

reg = LinearRegression()

labels = data_set['Final Price'].values
train1 = data_set.drop(['id','Final Price'],axis=1)
train1 = train1.values

train1

X_train, X_test, y_train, y_test = train_test_split(train1,labels,test_size=0.30,random_state=2)

#X_train = data_set[get_outliners(data_set['Final Price'],0.15)==1]

reg.fit(X_train,y_train)

reg.score(X_test,y_test)

from sklearn import ensemble
clf = ensemble.GradientBoostingRegressor(n_estimators = 400, max_depth = 5, min_samples_split = 2,
          learning_rate = 0.1, loss = 'ls')

clf.fit(X_train, y_train)
clf.score(X_test,y_test)

linear_predictions = clf.predict(X_test)
# Calculate Error
errors = abs(linear_predictions - y_test)
print('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')
# Calculate mean absolute percentage error (MAPE)
mape = 100 * (errors / y_test)# Calculate and display accuracy
accuracy = 100 - np.mean(mape)
print('Accuracy:', round(accuracy, 2), '%.')



"""# Testing Multiple Models"""

models = [LinearRegression(),
         RandomForestRegressor(n_estimators=100,max_features='sqrt'),
         KNeighborsRegressor(n_neighbors=8),
         SVR(kernel='linear'),
         LogisticRegression(solver='liblinear',max_iter=400)
         ]

TestModels = pd.DataFrame()
tmp = {}
for model in models:
    # Get Model Name
    m = str(model)
    tmp['Model'] = m[:m.index('(')]
    # Fit Model on The Training Set
    model.fit(X_train,y_train)
    # Predict Prices for test Dataset and Calculate R^2
    tmp['R2_Price'] = r2_score(y_test,model.predict(X_test))
    # Write Obtained Data
    TestModels = TestModels.append([tmp])
    
TestModels.set_index('Model', inplace=True)
fig, axes = plt.subplots(ncols=1, figsize=(10, 6))
TestModels.R2_Price.plot(ax=axes, kind='bar', title='R2_Price')
plt.show()

TestModels.R2_Price
RandForRegMod = RandomForestRegressor(n_estimators=100,max_features='sqrt')
X_train, X_test, y_train, y_test = train_test_split(train1,labels,test_size=0.30,random_state=2)
RandForRegMod.fit(X_train,y_train)
RandForRegMod.score(X_test,y_test)

predictions = RandForRegMod.predict(X_test)
# Calculate Error
errors = abs(predictions - y_test)
print('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')
# Calculate mean absolute percentage error (MAPE)
mape = 100 * (errors / y_test)# Calculate and display accuracy
accuracy = 100 - np.mean(mape)
print('Accuracy:', round(accuracy, 2), '%.')

